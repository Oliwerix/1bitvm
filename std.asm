%define a nand
%define c16 copy
%define x xor
%define nop copy 0,0,0

    ;; 1
%macro not 1
    a %1,%1
%endm
    ;; 1
%macro set0 1
    x %1,%1
%endm
    ;; 2
%macro set1 1
    set0 %1
    not %1
%endm

%macro cpy 2
    xor %2,%2
    xor %1,%2
%endm

    ;; jumps to "main"
    ;; requires .org 4 at begining
    ;; main <-(args)
%macro init 1
    .org 2
    .db by2(labels[%1])
    .org 0
    c 1, 0, 1
%endm

    ;; wait for reg to become 1
    ;; reg, trash
%macro wait_for 2
    .org alignto(here,4,0)
    cpy %1, %2
    not %2
    a %2, 13
%endm

    ;; wait for reg to become 0
    ;; reg, trash
%macro wait_forn 2
    .org alignto(here,4,0)
    cpy %1, %2
    nop
    a %2, 13
%endm

    ;; set "input" to STDOUT
    ;; input, trash
%macro set_out_b 2
    wait_forn OU_A, %2
    cpy %1,OU
    not OU_A
%endm

    ;; get "output" from STDIN
    ;; output, trash
%macro get_in_b 2
    wait_for IN_A, %2
    cpy IN, %1
%endm

    ;; add together 2 addreses, store in second, 3 is carry
    ;; generated by brute force
    ;; A => A, B => A+B, Carry
    ;; 5 cycles
%macro add 3
    //add------------------
    x %0, %2
    x %2, %1
    x %1, %2
    a %0, %2
    a %2, %2
    //add-end--------------
%endm

%macro call 1
    // call <py>hex(here//2)<py>
    set1 0x6e
    set0 0x6f
    c 0, 0x70, 0                ;0
    // call <py>hex(here//2)<py>
    add 0x6e,0x7c,0x6f          ;5
    set0 0x6e                   ;6
    add 0x6e,0x7b,0x6f          ;11
    add 0x6e,0x7a,0x6f          ;16
    not 0x6e                    ;17
    add 0x6e,0x79,0x6f          ;22
    not 0x6e                    ;23
    add 0x6e,0x78,0x6f          ;28
    add 0x6e,0x77,0x6f          ;33
    add 0x6e,0x76,0x6f          ;38
    add 0x6e,0x75,0x6f          ;43
    add 0x6e,0x74,0x6f          ;48
    add 0x6e,0x73,0x6f          ;53
    add 0x6e,0x72,0x6f          ;58
    add 0x6e,0x71,0x6f          ;63
    add 0x6e,0x70,0x6f          ;68
    c labels[%1], 0, 1          ;69
    nop                         ;70
    nop                         ;71
    nop                         ;71
    // call <py>hex(here//2)<py>
%endm

%macro ret 0
    c 0x70, 0, 0
%endm

    ;; prints 'char' -> 'char'+7 to STDOUT
    ;; char (0x15-0x1c), trash (0x14)
printc_f:
    set_out_b 0x15+ 0 , 0x14
    set_out_b 0x15+ 1 , 0x14
    set_out_b 0x15+ 2 , 0x14
    set_out_b 0x15+ 3 , 0x14
    set_out_b 0x15+ 4 , 0x14
    set_out_b 0x15+ 5 , 0x14
    set_out_b 0x15+ 6 , 0x14
    set_out_b 0x15+ 7 , 0x14
    ret
printc:
    .db by2(labels["printc_f"])
